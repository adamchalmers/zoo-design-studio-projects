// Tops


holeTypeSimple = 0
holeTypeCounterbore = 1
holeTypeCountersink = 2

export fn simple() {
  return { feature = holeTypeSimple }
}

export fn counterbore(diameter, depth) {
  return {
    diameter = diameter,
    depth = depth,
    feature = holeTypeCounterbore
  }
}

export fn countersink(diameter, angle) {
  return {
    diameter = diameter,
    angle = angle,
    feature = holeTypeCountersink
  }
}

// Bodies


export fn blind(depth, diameter) {
  return {
    blindDepth = depth,
    diameter = diameter
  }
}

// Ends


export fn drill(pointAngle) {
  return { drillBitAngle = pointAngle }
}

export fn flat() {
  return { drillBitAngle = 179.99deg }
}

// Defining the hole


fn drawTop(@partialHoleProfile, body, holeType) {
  prof = if holeType.feature == holeTypeSimple {
    partialHoleProfile
      |> xLine(length = body.diameter)
  } else if holeType.feature == holeTypeCounterbore {
    lip = (holeType.diameter - body.diameter) / 2
    partialHoleProfile
      |> yLine(length = holeType.depth)
      |> xLine(length = holeType.diameter / 2)
      |> yLine(length = -holeType.depth)
      |> xLine(length = -lip)
  } else if holeType.feature == holeTypeCountersink {
    t = holeType.angle / 2
    tr = holeType.diameter / 2
    br = body.diameter / 2
    assert(tr, isGreaterThan = br, error = "Diameter of the countersink must be greater than diameter of the hole's body")
    // Ugly trigonometry that I calculated with pen and paper
    up = (tr - br) / tan(t)
    b = br / tan(t)
    diag = (up + b) / cos(t) - (2 / (tan(t) * cos(t)))
    alpha = 90 - t
    partialHoleProfile
      |> yLine(length = up)
      |> xLine(length = tr)
      |> angledLine(length = diag, angle = 270 - alpha)
  } else {
    assert(holeType.feature, isLessThanOrEqual = holeTypeCountersink, error = "unknown holeType feature")
  }
  return prof
}

fn holeTypeHeight(body, holeType) {
  height = if holeType.feature == holeTypeSimple {
    0
  } else if holeType.feature == holeTypeCounterbore {
    holeType.depth
  } else if holeType.feature == holeTypeCountersink {
    t = holeType.angle / 2
    tr = holeType.diameter / 2
    br = body.diameter / 2
    // Ugly trigonometry that I calculated with pen and paper
    up = (tr - br) / tan(t)
up
  } else {
    assert(holeType.feature, isLessThanOrEqual = holeTypeCountersink, error = "unknown holeType feature")
  }
  return height
}

// Actually defining a hole


export fn sketchHoleProfile(@sketchOn, holeBottom, holeBody, holeType, shift) {
  body = holeBody
  bottom = holeBottom
  // Calculate the drill bit height
  radius = body.diameter / 2
  theta = bottom.drillBitAngle / 2
  drillHeight = radius / tan(theta)

  // Calculate total model height from holeType to bottom
  hBody = body.blindDepth
  hBott = drillHeight
  totalHeight = hBody + hBott + holeTypeHeight(body, holeType)
  sk = startProfile(sketchOn, at = [shift, -totalHeight])
    // Drill profile
    |> yLine(length = drillHeight)
    // Body depth
    |> yLine(length = body.blindDepth, tag = $d)
    // Top
    |> drawTop(body, holeType)
    // Body depth
    |> yLine(length = -body.blindDepth)
    // // Drill profile
    |> line(endAbsolute = [profileStartX(%), profileStartY(%)])
    |> close()
  return { profile = sk, axis = d }
}

export fn revolveHole(@holeProfile, edge) {
  return holeProfile
    |> revolve(axis = edge)
    |> appearance(color = "#ff0000")
}

export fn holeGeometry(@solid, face, holeBottom, holeBody, holeType, cutAt) {
  intoSolid = startSketchOn(
    solid,
    normalToFace = face,
    alignAxis = -Y,
    normalOffset = cutAt[1],
  )
  toCut = sketchHoleProfile(
    intoSolid,
    holeBottom,
    holeBody,
    holeType,
    shift = -cutAt[0],
  )

  drilled = revolveHole(toCut.profile, edge = toCut.axis)
  return drilled
}

export fn hole(@solid, face, holeBottom, holeBody, holeType, cutAt) {
  drilled = holeGeometry(solid, face, holeBottom, holeBody, holeType, cutAt)
  return subtract(solid, tools = [drilled])
}

export fn holesLinear(@solid, face, holeBottom, holeBody, holeType, cutAt, instances, distance, axis) {
drilled = holeGeometry(solid, face, holeBottom, holeBody, holeType, cutAt)
|> patternLinear3d(instances, distance, axis)

return subtract(solid, tools = drilled)
}